Testing an Analyser for a Bridge.NET library is not as straight forward as testing a regular C# library because no single project can load the Bridge library itself AND the standard C# libraries. Since the Analyser requires various "standard C#" libraries (such as Microsoft.CodeAnalysis) and since the ProductiveRage.Immutable library requres Bridge, that would seemingly make it impossible to reference the ProductiveRage.Immutable code to test!

The workaround is to create a separate project that links to the C# files that the Bridge ProductiveRage.Immutable library uses and build them as a standard C# class library - then THIS may be included as a reference in the code samples that are used as targets for the analyser in the unit tests. This is not ideal for several reasons - firstly, any time that a new file is added to the Bridge ProductiveRage.Immutable project, a link to that file must also be added to the "workaround project". Secondly, ProductiveRage.Immutable relies upon the Bridge library and so the parts of that library that are relied upon must be mocked out so that the workaround project actually compiles. And, thirdly, the assembly names of the workaround project and the "Bridge mock" project must match the real assembly names of the ProductiveRage.Immutable and Bridge libraries, since the analyser checks those assembly names to ensure that it isn't a "CtorSet" method declared in an entirely different library (for example).

This project is the "Bridge mock" project that the workaround project relies upon. It only has classes and methods that the workaround project requires and those only exist so that the workaround project compiles (all methods will throw an NotImplementedException because they are never intended to be executed).